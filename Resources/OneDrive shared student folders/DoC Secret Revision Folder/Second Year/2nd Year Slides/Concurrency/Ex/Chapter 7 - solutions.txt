/* Concurrency: State Models & Java Programs *  Jeff Magee & Jeff Kramer
*  Solutions to Exercises
*
*  Exercise 7.1
*/

property PS = (a -> (b -> PS|a -> PS)|b -> a -> PS).

/*
Trace to property violation in PS:
	b
	b
*/

==========================================================

/* Concurrency: State Models & Java Programs *  Jeff Magee & Jeff Kramer
*  Solutions to Exercises
*
*  Exercise 7.2
*/

const N = 10

property LIFTCAPACITY = LIFT[0],
LIFT[i:0..10] = (enter -> LIFT[i+1]
                |when(i>0) exit  -> LIFT[i-1]
                |when(i==0)exit  -> LIFT[0]
                ).
/*
Trace to property violation in LIFTCAPACITY:
	enter
	enter
	enter
	enter
	enter
	enter
	enter
	enter
	enter
	enter
	enter
*/

========================================================== /* Concurrency: State Models & Java Programs *  Jeff Magee & Jeff Kramer
*  Solutions to Exercises
*
*  Exercise 7.3
*/

CARPARKCONTROL(N=4) = SPACES[N],
SPACES[i:0..N] = (when(i>0) arrive->SPACES[i-1]
		|when(i<N) depart->SPACES[i+1]
		).

ARRIVALS   = (arrive->ARRIVALS).
DEPARTURES = (depart->DEPARTURES).

||CARPARK = (ARRIVALS||CARPARKCONTROL(4)||DEPARTURES).

property OVERFLOW(N=4) = OVERFLOW[0],
OVERFLOW[i:0..N] = (arrive -> OVERFLOW[i+1]
                   |depart -> OVERFLOW[i-1]
                   ).

||CHECK_CARPARK = (OVERFLOW(4) || CARPARK).

/* try safety check with OVERFLOW(3) */

progress ENTER = {arrive}

||LIVE_CARPARK = CARPARK >>{depart}.

==========================================================

/* Concurrency: State Models & Java Programs *  Jeff Magee & Jeff Kramer
*  Solutions to Exercises
*
*  Exercise 7.4
*/

BSEMA = (up -> down -> BSEMA).

PROCESS  = (console.up -> console.down -> PROCESS).

set Processes = {user[1..2],system[1..2]}

/* system processes have higher priority than user processes */ ||OS = ( Processes:PROCESS || Processes::console:BSEMA)>>{user}.

========================================================== /* Concurrency: State Models & Java Programs *  Jeff Magee & Jeff Kramer
*  Solutions to Exercises
*
*  Exercise 7.6
*/

const False = 0
const True  = 1
range Bool  = False..True
set   BoolActions = {setTrue, setFalse, [False], [True]}

BOOLVAR = VAL[False],
VAL[v:Bool] = (setTrue  -> VAL[True]
              |setFalse -> VAL[False]
              |[v]      -> VAL[v]
              ).

||FLAGS = (flag1:BOOLVAR || flag2:BOOLVAR).

NEIGHBOUR1 = (flag1.setTrue -> TEST),
TEST       = (flag2[b:Bool] ->
                if(b) then
                   (flag1.setFalse -> NEIGHBOUR1)
                else
                   (enter -> exit -> flag1.setFalse -> NEIGHBOUR1)
              )+{{flag1,flag2}.BoolActions}.

NEIGHBOUR2 = (flag2.setTrue -> TEST),
TEST       = (flag1[b:Bool] ->
                if(b) then
                   (flag2.setFalse -> NEIGHBOUR2)
                else
                   (enter -> exit-> flag2.setFalse -> NEIGHBOUR2)
              )+{{flag1,flag2}.BoolActions}.

property SAFETY = (n1.enter -> n1.exit -> SAFETY | n2.enter -> n2.exit -> SAFETY).

||FIELD = (n1:NEIGHBOUR1 || n2:NEIGHBOUR2 || {n1,n2}::FLAGS || SAFETY).

progress ENTER1  = {n1.enter}  //NEIGBOUR 1 always gets to enter progress ENTER2  = {n2.enter}  //NEIGHBOUR 2 always gets to enter

/* greedy neighbours - make setting the flags high priority - eagerness to enter*/

||GREEDY = FIELD << {{n1,n2}.{flag1,flag2}.setTrue}.

/* progress violations show situation where neither neighbour enters *  each continually retests the lock
*/





