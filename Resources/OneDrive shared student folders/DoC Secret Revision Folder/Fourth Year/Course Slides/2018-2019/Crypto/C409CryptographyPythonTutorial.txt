# Python libraries for Cryptography
# Andrea Callia D'Iddio
# email: a.calliadiddio@imperial.ac.uk
# (contact me if help is needed to install or to use these libraries)
# Note: these notes are for Python2 but everything should be done similarly in Python3.
# Please let me know if you have problem related to Python3.


# Links to official documentation:
# PyCryptoDome: https://pycryptodome.readthedocs.io/
# python-ecdsa: https://github.com/warner/python-ecdsa

# To install PyCrypto:
# pip install pycryptodome
# (in Linux you may need to use sudo)

# To install python-ecdsa:
# git clone "https://github.com/warner/python-ecdsa"
# cd python-ecdsa/
# python setup.py install
# (in Linux you may need to use sudo with the last command)

###########################################
# HOW TO USE THESE NOTES
###########################################

# These notes are provided as a Python source (in fact my comments
# are expressed as Python comments) but I recommend you that,
# instead of passing this whole file to the Python interpreter,
# you just copy and paste these lines one by one in the interpreter
# terminal to see the effects of each single instruction and 
# to play with the library.

# An example of how to run most of these instructions is also
# in the Panopto video lecture.

# The notes are made of sections and subsections, the index
# is below.
# 1. MODES OF OPERATION
#   1.1 THE ECB MODE
#   1.2 THE CBC MODE
#   1.3 THE OFB AND CFB MODES
#   1.4 THE COUNTER MODE
# 2. HASH FUNCTIONS
# 3. MESSAGE AUTHENTICATION CODES: HMAC
# 4. PUBLIC KEY CRYPTOSYSTEMS: RSA
# 5. DIGITAL SIGNATURE
#   5.1 DIGITAL SIGNATURE BASED ON RSA
#   5.2 DIGITAL SIGNATURE BASED ON ECDSA

###########################################
# SECTION "DEPENDENCIES"
###########################################

# Some sections and subsections share common variables, then
# the corresponding instructions should be executed together
# to obtain the same results without undefined symbols.
# In particular:
# * Section 1 and all its subsections share many variables.
# * Section 4 (RSA) and subsection 5.1 (RSA digital signature)
# also share many variables.

###########################################
# 1. MODES OF OPERATION
###########################################

from Crypto.Cipher import AES
# Pycrypto module for modes of operation based on AES.
# The same examples can be executed using the DES module,
# just replace AES with DES (but remember that DES is less safe)
# See the API link provided for a list of supported ciphers.

from Crypto import Random
# Pycrypto module for pseudo-random generation of values.
# I suggest to use this random generation module provided by
# PyCrypto, because recently the random generator coming from the
# Python standard libraries has been proven to be unsafe, i.e.
# some regularities have been found which may make it predictable,

import binascii
# Useful standard module used to print hexadecimal values using
# the 'hexlify' function.

text = b'[sixteen bytes1][sixteen bytes2][sixteen bytes3][sixteen bytes4][sixteen bytes5][sixteen bytes6][sixteen bytes7][sixteen bytes8]'
# An example of text which will be encrypted. In order to simplify
# things it consists exactly of eight 16-bytes blocks. The blocks
# are distinguishable because each block is the portion of text
# between two brackets, including the brackets. As you see, blocks
# are also numbered to simplify things.

# Also note that the text is declared as a string of *bytes* 
# (note the b keyword before the string). In older versions of
# Python (e.g. Python 2.7.8), a default string is a string of
# bytes, then each character is exactly 1 byte, but in the
# new versions (e.g. Python 3.x) a deault string is a
# *unicode* string, in which one character is 4 bytes.
# PyCrypto does not work with unicode strings, then if you
# are using newer versions of Python please use the b
# keyword before a constant string, or the bytes()
# function/constructor when producing strings dynamically
# (see the next lines for examples of how to use bytes() ).

key = Random.new().read(AES.block_size)
# A key is generated for the AES block cipher using a
# PyCrypto random generator object. An AES key size must be
# either 16, 24, or 32 bytes long (i.e. either 128, 192 or 
# 256 bits). In this case we use the default value 
# AES.block_size which is 16 bytes.

###########################################
# 1.1 THE ECB MODE
###########################################

ecb_cipher = AES.new(key, AES.MODE_ECB)
# A cipher based on the ECB mode (with AES as underlying
# block cipher) is constructed using the key.

ecb_ctext = ecb_cipher.encrypt(text)
# A ciphertext is generated by encrypting the text string with
# the just created cipher. Note that since ECB is used, then
# input strings must be a multiple of 16 in length, otherwise
# an error is reported. Padding is possible, but it should be
# done manually by adding some characters to the string in
# case its length is not a multiple of 16. In our case, we
# avoided padding to simplify the explanation.

ecb_ctext
# If you write this the interpreter will print the contents
# of the "ecb_ctext" variable, which is the ciphertext. But
# since this code may contain many non-printable characters
# (they are escaped using \x) then you will probably get
# an unreadable string. It's better to make it hexadecimal.

binascii.hexlify(ecb_ctext)
# This should print the hexadecimal representation of the 
# ciphertext. 

ecb_cipher.decrypt(ecb_ctext)
# The ciphertext is decrypted, giving back the original text.
# As I said previously, PyCrypto only works with byte strings,
# then you should pass the byte string to decrypt(), not the
# hexadecimal representation.

# The following two examples show that the 16 bytes blocks
# are encrypted independently using the ECB mode (and this is not
# very safe), i.e. if only the first part is encrypted, then the
# first part of ecb_ctext is produced, and if only the second part
# is encrypted, then the second part of ecb_ctext is produced.

text1 = text[:32]
text2 = text[32:]
# With these two instructions, the plain text is splitted into two
# parts. The first part (text1) contains the first 32 characters, the
# second part (text2) contains the remaining characters. Note that
# the length of both parts is still a multiple of 16, then no padding
# is required.

ecb_ctext1 = ecb_cipher.encrypt(text1)
binascii.hexlify(ecb_ctext1)
# The first part of the text is encrypted and the corresponding
# ciphertext is printed in hex format. Note that, as you should
# expect, ecb_ctext1 is identical to the first part of 
# ecb_ctext. This happens because ECB is deterministic and always
# encrypts blocks in the same way when the same key # is used
# (then ECB is a safe mode of operation!).

ecb_ctext2 = ecb_cipher.encrypt(text2)
binascii.hexlify(ecb_ctext2)
# The second part of the text is encrypted and the corresponding
# ciphertext is printed in hex format. Again, ecb_ctext2 is
# identical to the second part of ecb_ciphertext, for the same
# reasons explained above.

newtext = (text.replace('3', '1')).replace('5', '1')
newtext
# Another example which shows the weakness of ECB. Here we create
# a new text which is similar to the original text, it just has
# the same text in block1, block3 and block5. In fact, the text
# of these three blocks is always '[sixteen bytes1]'.

new_ecb_ctext = ecb_cipher.encrypt(newtext)
binascii.hexlify(new_ecb_ctext)
# The new text is encrypted and the corresponding ciphertext is 
# printed in hex format. If you look at the ciphertext hex 
# representation, you will notice that the first 32 digits
# appear three times. This clearly shows the weakness of ECB,
# as the first 32 digits represent the first 16 bytes block
# (remember that 1 byte = 2 hex digits) of newtext, i.e.
# the substring "[sixteen bytes1]", which is always encrypted
# in the same way by ECB.

s = binascii.hexlify(new_ecb_ctext)
t = s[:32]
s.count(t)
# These lines just confirm what said above, in fact they count
# the occurrences of the first 32 digits of the produced
# ciphertext, then you should expect s.count(t) = 3.

###########################################
# 1.2 THE CBC MODE
###########################################

# In the following, we are showing how to use the CBC mode
# of operation, which is safer than ECB. The code to use
# it is almost identical to the code shown for ECB, but as
# you know it requires a random initialization vector.

iv = Random.new().read(AES.block_size)
# The random initialization vector (IV) is created by using a
# PyCrypto random generator object. The IV size must be
# exactly 16 bytes long.

cbc_cipher = AES.new(key, AES.MODE_CBC, iv)
# A cipher based on the CBC mode (still with AES as underlying
# block cipher) is constructed using using the just created IV
# and the existing key. Note that we are reusing the key we
# have created for the ECB mode, in real world this is not
# recommended in general, it is always better to establish
# different keys when making different communications with
# different persons/entities, here the same key is used just
# for simplicity.

ctext = cbc_cipher.encrypt(text)
hex_ctext = binascii.hexlify(ctext)
hex_ctext
# These three lines use cbc_cipher to encrypt the text
# containing eight 16-byte blocks defined previously.
# The ciphertext is printed in hex format.

# Note that cbc_cipher is a stateful object, and its state
# changes when new text is encrypted, because the state
# contains the last ciphered block which is used to
# encrypt the next block (see the definition of CBC in
# the Crypto notes). Then you cannot use the same object
# to both encrypt and decrypt the text. To decrypt the
# text, you should create a new cipher using the same
# key and the same IV, as shown below.

cbc_decipher1 = AES.new(key, AES.MODE_CBC, iv)
# A new CBC cipher is created with the same key and 
# the same IV in order to be able to decrypt ciphertext
# produced by cbc_cipher. This cipher is called "decipher"
# just because it is used only to decrypt, but it is exactly
# the same type of object as cbc_cipher, and it is created
# in the same way.

plaintext1 = cbc_decipher1.decrypt(ctext)
plaintext1
# The ciphertext is decrypted and the original plain text
# is recovered.

# *** NOTE ***
# The following code is related to the MENTIMETER question
# which has been proposed during the lecture (you can see
# it on Panopto). In that code we reason about ERROR
# PROPAGATION and we try to corrupt the ciphertext to see
# how this will affect decryption using CBC.

hex_corrupted = hex_ctext[:39] + '123' + hex_ctext[42:]
# Using this instruction we corrupt the hex representation
# of the ciphertext by replacing the three digits in positions
# 40, 41 and 42 with the digits 1,2,3 respectively. Since
# one byte corresponds to two hex digits, this means that
# we are corrupting the 20th and 21st bytes of the ciphertext,
# i.e. we are corrupting the second block.

corrupted = bytes(binascii.unhexlify(hex_corrupted))
# Here we convert the corrupted ciphertext from hex format
# to byte string format, in order to be able to decrypt the
# ciphertext using CBC.

cbc_decipher2 = AES.new(key, AES.MODE_CBC, iv)
# A new CBC cipher is created with the same key and 
# the same IV in order to be able to decrypt ciphertext
# produced by cbc_cipher. 

plaintext2 = cbc_decipher2.decrypt(corrupted)
plaintext2
# The corrupted text is decrypted. From the recovered plain
# text you can notice that the second block is totally lost,
# and a couple of characters of the third block are also
# lost. In fact, for CBC if the i-th ciphertext block is corrupted
# then the i-th and (i+1)-th corresponding plaintext blocks will
# be corrupted when decrypting (see the definition of CBC for
# an explanation of this). You may also be asked to solve 
# exercises about error propagation in modes of operation.

# In the following, we show that CBC is safer than ECB because
# each time it encrypts the same block differently.

newctext = cbc_cipher.encrypt(newtext)
newhex_ctext = binascii.hexlify(newctext)
newhex_ctext
newhex_ctext.count(newhex_ctext[:32])
# In these four lines, we try to encrypt the blocks contained
# in the previously defined variable "newtext", in which the
# first block occur three times in the text. By observing the
# ciphertext and by using the count() method, we make sure
# that this time, using the CBC mode, no repeated blocks appear
# in the hex ciphertext, then the ciphertext does not reflect
# the plaintext pattern as happens in ECB.

###########################################
# 1.3 THE OFB AND CFB MODES
###########################################

# Ciphers based on OFB and CFB modes are used in the same
# way as CBC, as shown below.
ofb_cipher = AES.new(key, AES.MODE_OFB, iv)
cfb_cipher = AES.new(key, AES.MODE_CFB, iv)

###########################################
# 1.4 THE COUNTER MODE
###########################################

# Another interesting mode is the counter mode, which is
# different from the other modes as it requires a stateful
# counting object to work. 

from Crypto.Util import Counter
# The Counter model is imported.

ctr=Counter.new(128)
# A counter object is generated. When you create a counter
# object, you should also specify the length in bits of each
# counter block, which must match the block size. As we said
# at the beginning, we are using the default block size of
# 16 bytes, which correspond to 128 bits

ctr_cipher = AES.new(key, AES.MODE_CTR, counter=ctr)
# A cipher based on the CTR mode of operation and AES block
# cipher is created. In order to create it, you also need to
# create or specify a Counter object.

ctr_ctext = ctr_cipher.encrypt(text)
binascii.hexlify(ctr_ctext)
# Encryption using the CTR mode.

ctr2=Counter.new(128)
# A new counter object is generated.

ctr_decipher = AES.new(key, AES.MODE_CTR, counter=ctr2)
# A new cipher is created for decryption.

ctr_decipher.decrypt(ctr_ctext)
# The ciphertext is decrypted.

# Remark: note that, like the CFB mode, the CTR mode does not need
# the text length to be a multiple of 16.

# Then the CFB mode and the CTR mode can be used as *stream ciphers*.

###########################################
# 2. HASH FUNCTIONS
###########################################

from Crypto.Hash import SHA256
# Pycrypto module for the SHA256 hash function.
# Other hash functions are available in the PyCrypto API,
# but I do not recomment the MD5 function, as it has been
# shown to be not safe enough.

h1 = SHA256.new()
# A new "hashing object" is built. This is a *stateful*
# object which can be updated by adding new chunks of
# text. When calling the digest() or hexdigest() methods
# all the text added so far will be hashed.

h1.update(b'This is a test message.')
# A string of bytes is added to the hash object.

print h1.hexdigest()
# The digest is calculated and returned as an hexadecimal value.
# (there is a specific method, no need for binascii.hexlify() )

h1.digest()
# The digest can also be returned as a byte string using the
# digest() method. This byte string is not comfortable to read,
# but it is very useful when multiple hashing must be performed,
# as it happens during mining in the Bitcoin context. In fact,
# the update() method of an hashing object accepts a byte string
# as input, then the result of digest() can be passed to another
# hashing object in order to calculate a double hash.

# The following example shows that in a good hash
# function *any* change on the text is sufficient
# to obtain a completely different digest. In the
# example, the word "this" has been replaced by
# "thus", i.e. only one character is changed.

h2 = SHA256.new() 
h2.update(b'Thus is a test message')    
print h2.hexdigest()
# This code should produce a completely different digest with
# respect to the one produced by h1.

###########################################
# 3. MESSAGE AUTHENTICATION CODES: HMAC
###########################################

from Crypto.Hash import HMAC
from Crypto.Hash import SHA256
# HMAC is the PyCrypto module for the hash-based MACs.
# The SHA256 module is also loaded in order to choose SHA256
# as underlying hash function for HMAC.

from Crypto import Random
key = Random.new().read(20)
# A random key is created. Notice that this time, unlike the
# previous section, a key can have any size greater than zero.

h = HMAC.new(key, digestmod=SHA256)
h.update(b'Hello')
print h.hexdigest()
# As you can see in these three lines, a HMAC works almost
# like a normal hash function, the only (fundamental)
# difference is that a HMAC object requires a key in order
# to work, because that key must be used for authentication.

###########################################
# 4. PUBLIC KEY CRYPTOSYSTEMS: RSA
###########################################

from Crypto.PublicKey import RSA
# The module which implements RSA crypto primitives is loaded.

key = RSA.generate(2048)
# A RSA key structure is generated by specifying the length (in bits)
# of the modulus. The modulus must be long enough to prevent attacks 
# (e.g. if too short factorization could be easier).
# The RSA modulus length must be multiple of 256 and >= 1024.
# If you increase the modulus length, the generation will take more
# time. (Why? Try to answer to this as an exercise)

# The symbols used in the key object are the same used in literature:
# n, e, d, p, q, u
# where, for example, (n, e) is the public key, (n, d) is the private
# key, and p and q are the prime numbers used to generate the
# keys (and n == p * q).

key.e
key.d
key.p
key.q
# These instructions will print e, d
# and the two prime numbers on the screen.

pkey = key.publickey()
# This generates a new key structure which just contains public
# information, i.e. just the pair (n, e) i.e. the public key.

pkey.n
pkey.e
# pkey.d would return an error
# pkey.p would return an error
# pkey.q would return an error
# These instructions show that in pkey only the public information
# (i.e. the public key) is available.

# The following code is used to save the public and private key
# in a file.

prvkf = open('privkey', 'w')
pubkf = open('pubkey', 'w')        
# prvkf is the file where the public key is saved.
# pubkf is the file where the public key is saved.

prvkf.write(key.exportKey("PEM"))
pubkf.write(pkey.exportKey("PEM"))
# The two keys are exported in PEM format, which is a base64 encoding
# of the keys plus headers (you can print them if you are curious).
# The two keys in PEM format are written in the corresponding files.

prvkf.close()
pubkf.close()
# The two files are closed.

from Crypto.Cipher import PKCS1_OAEP
# PKCS1 is an industry standard which applies some techniques,
# like randomization, in order to use RSA safely in real world.
# This is an implementation which relies on the random oracle
# methodology.

# Suppose Alice (A) wants to send a confidential message to Bob (B)
# in a way such that only Bob can read the message, using RSA.

message = 'To be encrypted'
# This is the message to be encrypted.

Bpubkey = RSA.importKey(open('pubkey').read())
# Alice loads the Bob's public key from a file.

Acipher = PKCS1_OAEP.new(Bpubkey)
# a cipher based on RSA is created by Alice using Bob's public key.

ciphertext = Acipher.encrypt(message)
# Alice encrypts the message.

Bprivkey = RSA.importKey(open('privkey').read())
# On the other side, Bob loads his private key from a file.

Bcipher = PKCS1_OAEP.new(Bprivkey)
# a cipher based on RSA is created by Bob using his own private key.

dec_message = Bcipher.decrypt(ciphertext)
dec_message
# Bob decrypts the message and prints it on the screen.

###########################################
# 5. DIGITAL SIGNATURE
###########################################

###########################################
# 5.1 DIGITAL SIGNATURE BASED ON RSA
###########################################

from Crypto.Signature import PKCS1_PSS
# The Pycrypto module for the PKCS1 signature standard combined with
# the Probabilistic Signature Scheme is loaded.

message = 'This is a message I want to sign using a digital signature.'

# Suppose Bob wants to sign a message with his private key and to
# sent it to Alice. For simplicity we will use the same keys used
# in section 3, but remember that since here we are using them for
# a different purpose, then probably you want to generate different
# keys.

from Crypto.Hash import SHA256
h = SHA256.new()
h.update(message)
Bsigner = PKCS1_PSS.new(Bprivkey)    
signature = Bsigner.sign(h)
# a signer based on RSA and SHA256 is created by Bob using his own
# private key. Bob's signer is used to sign the message and the
# messsage with the signature can be sent to Alice.

h = SHA256.new()
h.update(message)
Averifier = PKCS1_PSS.new(Bpubkey)
Averifier.verify(h, signature)
# a verifier based on RSA and SHA256 is created by Alice using
# Bob's public key. Alice's verifier is used to verify whether the
# message signature has been made by Bob.
# The verify() method returns True if the signature is valid
# (i.e. if the message has been signed by Bob), false otherwise.
# In this case it should return True (and print True on the screen).

Eprivkey = RSA.generate(2048)
Epubkey = Eprivkey.publickey()
# Suppose Eve (E) generated her own public key and suppose that when 
# Alice receives Bob's message, she wants to check whether the message
# has been signed by Eve.

Averifier2 = PKCS1_PSS.new(Epubkey)
Averifier2.verify(h, signature)
# another verifier is created by Alice using Eve's public key. 
# This time the verify() method should return False, because
# the document has not been signed by Eve.

###########################################
# 5.2 DIGITAL SIGNATURE BASED ON ECDSA
###########################################

# Available standard curves: prime192v1, secp224r1,
# prime256v1, secp384r1, secp521r1
# and the 256-bit curve used by Bitcoin: secp256k1

# Warning: The library does not offer protection against 
# timing attacks. To prevent them, encryption must be
# implemented in a way such that it always takes the
# same time (e.g. using sleeping functions).

from ecdsa import SigningKey
# The python-ecdsa module for ECDSA-based digital signature is
# loaded.

sk = SigningKey.generate()
signature = sk.sign('message')
# This is similar to RSA-based PyCrypto signing (see 5.1). The 
# message is signed using the "signing key", which is the
# private key.

vk = sk.get_verifying_key()
assert vk.verify(signature, 'message')
# This is also similar to RSA-based PyCrypto signing. The
# "verifying key", i.e. the public key, is generated from
# the private key and it will only contain public information.
# The signature is verified for the message using the verify()
# method. This method returns True if the sign is valid,
# otherwise it raises a BadSignatureError exception. In this
# case it should return True.

# vk2 = SigningKey.generate().get_verifying_key()
# assert vk2.verify(signature, 'message')
# In this case the verify() method would raise the
# BadSignature exceptionError, because the verification has been
# done using another public key.

from ecdsa import NIST384p
sk2 = SigningKey.generate(curve=NIST384p)
# If generate() is called with no arguments, then the default
# curve NIST192p is used to generate the keys. It is possible
# to choose a specific standard curve using 'curve=' when
# calling generate(). In this case, the NIST384p standard
# curve has been used.

sk.to_string()
# The signing (or verifying) key can be printed as a string using
# the to_string() method. It can also be loaded from a string
# using the from_string() method, but in that case the curve must
# be specified.
# e.g. sk3 = SigningKey.from_string(s, curve=NIST384p)

import binascii
binascii.hexlify(sk.to_string())
# As usual we can print the key in hex format.

print sk.to_pem()
# As for RSA keys, ECDSA keys can be printed (and stored) using
# the PEM format (see section 4 for details about PEM).
# It is also possible to load the key from the PEM format, e.g.
# using SigningKey.from_pem(PEMstring), and in this case it
# is not necessary to specify the curve.

from Crypto.Hash import SHA
signature2 = sk.sign('message', hashfunc=SHA.new)
# It is also possible to use a specific hash function for the
# ECDSA-based digital signature. In this case, the SHA hash
# function is imported from the PyCrypto library.

# from Crypto.Hash import SHA256
# signature2 = sk.sign('message', hashfunc=SHA256.new)
# This would produce an error because the curve used in this
# case (thee default NIST192p curve) would be too short for
# the digest.

from Crypto import Random
sk3 = SigningKey.generate(entropy=Random.new().read)
# It is also possible to specify an entropy source when generating
# ECDSA keys. In this case, a random generator object has been
# loaded from the PyCrypto library.

